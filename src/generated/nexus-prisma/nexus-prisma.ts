/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Gift: GiftObject
      List: ListObject
      User: UserObject
      Member: MemberObject
      GiftConnection: GiftConnectionObject
      PageInfo: PageInfoObject
      GiftEdge: GiftEdgeObject
      AggregateGift: AggregateGiftObject
      MemberConnection: MemberConnectionObject
      MemberEdge: MemberEdgeObject
      AggregateMember: AggregateMemberObject
      ListConnection: ListConnectionObject
      ListEdge: ListEdgeObject
      AggregateList: AggregateListObject
      UserConnection: UserConnectionObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      GiftSubscriptionPayload: GiftSubscriptionPayloadObject
      GiftPreviousValues: GiftPreviousValuesObject
      MemberSubscriptionPayload: MemberSubscriptionPayloadObject
      MemberPreviousValues: MemberPreviousValuesObject
      ListSubscriptionPayload: ListSubscriptionPayloadObject
      ListPreviousValues: ListPreviousValuesObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Gift: GiftFieldDetails
      List: ListFieldDetails
      User: UserFieldDetails
      Member: MemberFieldDetails
      GiftConnection: GiftConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      GiftEdge: GiftEdgeFieldDetails
      AggregateGift: AggregateGiftFieldDetails
      MemberConnection: MemberConnectionFieldDetails
      MemberEdge: MemberEdgeFieldDetails
      AggregateMember: AggregateMemberFieldDetails
      ListConnection: ListConnectionFieldDetails
      ListEdge: ListEdgeFieldDetails
      AggregateList: AggregateListFieldDetails
      UserConnection: UserConnectionFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      GiftSubscriptionPayload: GiftSubscriptionPayloadFieldDetails
      GiftPreviousValues: GiftPreviousValuesFieldDetails
      MemberSubscriptionPayload: MemberSubscriptionPayloadFieldDetails
      MemberPreviousValues: MemberPreviousValuesFieldDetails
      ListSubscriptionPayload: ListSubscriptionPayloadFieldDetails
      ListPreviousValues: ListPreviousValuesFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      GiftWhereUniqueInput: GiftWhereUniqueInputInputObject
      MemberWhereInput: MemberWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      GiftWhereInput: GiftWhereInputInputObject
      ListWhereInput: ListWhereInputInputObject
      MemberWhereUniqueInput: MemberWhereUniqueInputInputObject
      ListWhereUniqueInput: ListWhereUniqueInputInputObject
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      GiftCreateInput: GiftCreateInputInputObject
      ListCreateOneInput: ListCreateOneInputInputObject
      ListCreateInput: ListCreateInputInputObject
      UserCreateOneInput: UserCreateOneInputInputObject
      UserCreateInput: UserCreateInputInputObject
      MemberCreateManyInput: MemberCreateManyInputInputObject
      MemberCreateInput: MemberCreateInputInputObject
      GiftUpdateInput: GiftUpdateInputInputObject
      ListUpdateOneRequiredInput: ListUpdateOneRequiredInputInputObject
      ListUpdateDataInput: ListUpdateDataInputInputObject
      UserUpdateOneRequiredInput: UserUpdateOneRequiredInputInputObject
      UserUpdateDataInput: UserUpdateDataInputInputObject
      UserUpsertNestedInput: UserUpsertNestedInputInputObject
      MemberUpdateManyInput: MemberUpdateManyInputInputObject
      MemberUpdateWithWhereUniqueNestedInput: MemberUpdateWithWhereUniqueNestedInputInputObject
      MemberUpdateDataInput: MemberUpdateDataInputInputObject
      MemberUpsertWithWhereUniqueNestedInput: MemberUpsertWithWhereUniqueNestedInputInputObject
      MemberScalarWhereInput: MemberScalarWhereInputInputObject
      MemberUpdateManyWithWhereNestedInput: MemberUpdateManyWithWhereNestedInputInputObject
      MemberUpdateManyDataInput: MemberUpdateManyDataInputInputObject
      ListUpsertNestedInput: ListUpsertNestedInputInputObject
      UserUpdateOneInput: UserUpdateOneInputInputObject
      GiftUpdateManyMutationInput: GiftUpdateManyMutationInputInputObject
      MemberUpdateInput: MemberUpdateInputInputObject
      MemberUpdateManyMutationInput: MemberUpdateManyMutationInputInputObject
      ListUpdateInput: ListUpdateInputInputObject
      ListUpdateManyMutationInput: ListUpdateManyMutationInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      GiftSubscriptionWhereInput: GiftSubscriptionWhereInputInputObject
      MemberSubscriptionWhereInput: MemberSubscriptionWhereInputInputObject
      ListSubscriptionWhereInput: ListSubscriptionWhereInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    Genre: GenreValues,
    Role: RoleValues,
    MemberShip: MemberShipValues,
    MemberOrderByInput: MemberOrderByInputValues,
    GiftOrderByInput: GiftOrderByInputValues,
    ListOrderByInput: ListOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'gift', args?: QueryGiftArgs[] | false, alias?: string  } 
  | { name: 'gifts', args?: QueryGiftsArgs[] | false, alias?: string  } 
  | { name: 'giftsConnection', args?: QueryGiftsConnectionArgs[] | false, alias?: string  } 
  | { name: 'member', args?: QueryMemberArgs[] | false, alias?: string  } 
  | { name: 'members', args?: QueryMembersArgs[] | false, alias?: string  } 
  | { name: 'membersConnection', args?: QueryMembersConnectionArgs[] | false, alias?: string  } 
  | { name: 'list', args?: QueryListArgs[] | false, alias?: string  } 
  | { name: 'lists', args?: QueryListsArgs[] | false, alias?: string  } 
  | { name: 'listsConnection', args?: QueryListsConnectionArgs[] | false, alias?: string  } 
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'gift'
  | 'gifts'
  | 'giftsConnection'
  | 'member'
  | 'members'
  | 'membersConnection'
  | 'list'
  | 'lists'
  | 'listsConnection'
  | 'user'
  | 'users'
  | 'usersConnection'


type QueryGiftArgs =
  | 'where'
type QueryGiftsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGiftsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMemberArgs =
  | 'where'
type QueryMembersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryMembersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryListArgs =
  | 'where'
type QueryListsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryListsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  gift: {
    type: 'Gift'
    args: Record<QueryGiftArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GiftWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Gift | null> | prisma.Gift | null
  }
  gifts: {
    type: 'Gift'
    args: Record<QueryGiftsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GiftWhereInput | null, orderBy?: prisma.GiftOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Gift[]> | prisma.Gift[]
  }
  giftsConnection: {
    type: 'GiftConnection'
    args: Record<QueryGiftsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GiftWhereInput | null, orderBy?: prisma.GiftOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GiftConnection> | prisma.GiftConnection
  }
  member: {
    type: 'Member'
    args: Record<QueryMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: MemberWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Member | null> | prisma.Member | null
  }
  members: {
    type: 'Member'
    args: Record<QueryMembersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MemberWhereInput | null, orderBy?: prisma.MemberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Member[]> | prisma.Member[]
  }
  membersConnection: {
    type: 'MemberConnection'
    args: Record<QueryMembersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: MemberWhereInput | null, orderBy?: prisma.MemberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MemberConnection> | prisma.MemberConnection
  }
  list: {
    type: 'List'
    args: Record<QueryListArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ListWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.List | null> | prisma.List | null
  }
  lists: {
    type: 'List'
    args: Record<QueryListsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ListWhereInput | null, orderBy?: prisma.ListOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.List[]> | prisma.List[]
  }
  listsConnection: {
    type: 'ListConnection'
    args: Record<QueryListsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ListWhereInput | null, orderBy?: prisma.ListOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ListConnection> | prisma.ListConnection
  }
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
}
  

// Types for Gift

type GiftObject =
  | GiftFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'link', args?: [] | false, alias?: string  } 
  | { name: 'list', args?: [] | false, alias?: string  } 
  | { name: 'owner', args?: [] | false, alias?: string  } 

type GiftFields =
  | 'id'
  | 'name'
  | 'link'
  | 'list'
  | 'owner'



  

export interface GiftFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  link: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  list: {
    type: 'List'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Gift">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.List> | prisma.List
  }
  owner: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Gift">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
}
  

// Types for List

type ListObject =
  | ListFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'familyName', args?: [] | false, alias?: string  } 
  | { name: 'babyGenre', args?: [] | false, alias?: string  } 
  | { name: 'babyName', args?: [] | false, alias?: string  } 
  | { name: 'birthDate', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 
  | { name: 'members', args?: ListMembersArgs[] | false, alias?: string  } 
  | { name: 'isActivated', args?: [] | false, alias?: string  } 
  | { name: 'isOpen', args?: [] | false, alias?: string  } 

type ListFields =
  | 'id'
  | 'name'
  | 'description'
  | 'familyName'
  | 'babyGenre'
  | 'babyName'
  | 'birthDate'
  | 'author'
  | 'members'
  | 'isActivated'
  | 'isOpen'


type ListMembersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface ListFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  familyName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  babyGenre: {
    type: 'Genre'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"List">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Genre | null> | prisma.Genre | null
  }
  babyName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  birthDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  author: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"List">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  members: {
    type: 'Member'
    args: Record<ListMembersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"List">,
      args: { where?: MemberWhereInput | null, orderBy?: prisma.MemberOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Member[]> | prisma.Member[]
  }
  isActivated: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isOpen: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 
  | { name: 'genre', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'firstName'
  | 'lastName'
  | 'email'
  | 'password'
  | 'createdAt'
  | 'updatedAt'
  | 'role'
  | 'genre'



  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  role: {
    type: 'Role'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role> | prisma.Role
  }
  genre: {
    type: 'Genre'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Genre> | prisma.Genre
  }
}
  

// Types for Member

type MemberObject =
  | MemberFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 

type MemberFields =
  | 'id'
  | 'user'
  | 'status'



  

export interface MemberFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Member">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  status: {
    type: 'MemberShip'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Member">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MemberShip | null> | prisma.MemberShip | null
  }
}
  

// Types for GiftConnection

type GiftConnectionObject =
  | GiftConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GiftConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GiftConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GiftConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GiftEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GiftConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GiftEdge[]> | prisma.GiftEdge[]
  }
  aggregate: {
    type: 'AggregateGift'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GiftConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGift> | prisma.AggregateGift
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for GiftEdge

type GiftEdgeObject =
  | GiftEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GiftEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GiftEdgeFieldDetails {
  node: {
    type: 'Gift'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GiftEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Gift> | prisma.Gift
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGift

type AggregateGiftObject =
  | AggregateGiftFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGiftFields =
  | 'count'



  

export interface AggregateGiftFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MemberConnection

type MemberConnectionObject =
  | MemberConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type MemberConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface MemberConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MemberConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'MemberEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"MemberConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MemberEdge[]> | prisma.MemberEdge[]
  }
  aggregate: {
    type: 'AggregateMember'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MemberConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateMember> | prisma.AggregateMember
  }
}
  

// Types for MemberEdge

type MemberEdgeObject =
  | MemberEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type MemberEdgeFields =
  | 'node'
  | 'cursor'



  

export interface MemberEdgeFieldDetails {
  node: {
    type: 'Member'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MemberEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Member> | prisma.Member
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateMember

type AggregateMemberObject =
  | AggregateMemberFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateMemberFields =
  | 'count'



  

export interface AggregateMemberFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ListConnection

type ListConnectionObject =
  | ListConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ListConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ListConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ListConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ListEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ListConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ListEdge[]> | prisma.ListEdge[]
  }
  aggregate: {
    type: 'AggregateList'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ListConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateList> | prisma.AggregateList
  }
}
  

// Types for ListEdge

type ListEdgeObject =
  | ListEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ListEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ListEdgeFieldDetails {
  node: {
    type: 'List'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ListEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.List> | prisma.List
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateList

type AggregateListObject =
  | AggregateListFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateListFields =
  | 'count'



  

export interface AggregateListFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createGift', args?: MutationCreateGiftArgs[] | false, alias?: string  } 
  | { name: 'updateGift', args?: MutationUpdateGiftArgs[] | false, alias?: string  } 
  | { name: 'updateManyGifts', args?: MutationUpdateManyGiftsArgs[] | false, alias?: string  } 
  | { name: 'upsertGift', args?: MutationUpsertGiftArgs[] | false, alias?: string  } 
  | { name: 'deleteGift', args?: MutationDeleteGiftArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGifts', args?: MutationDeleteManyGiftsArgs[] | false, alias?: string  } 
  | { name: 'createMember', args?: MutationCreateMemberArgs[] | false, alias?: string  } 
  | { name: 'updateMember', args?: MutationUpdateMemberArgs[] | false, alias?: string  } 
  | { name: 'updateManyMembers', args?: MutationUpdateManyMembersArgs[] | false, alias?: string  } 
  | { name: 'upsertMember', args?: MutationUpsertMemberArgs[] | false, alias?: string  } 
  | { name: 'deleteMember', args?: MutationDeleteMemberArgs[] | false, alias?: string  } 
  | { name: 'deleteManyMembers', args?: MutationDeleteManyMembersArgs[] | false, alias?: string  } 
  | { name: 'createList', args?: MutationCreateListArgs[] | false, alias?: string  } 
  | { name: 'updateList', args?: MutationUpdateListArgs[] | false, alias?: string  } 
  | { name: 'updateManyLists', args?: MutationUpdateManyListsArgs[] | false, alias?: string  } 
  | { name: 'upsertList', args?: MutationUpsertListArgs[] | false, alias?: string  } 
  | { name: 'deleteList', args?: MutationDeleteListArgs[] | false, alias?: string  } 
  | { name: 'deleteManyLists', args?: MutationDeleteManyListsArgs[] | false, alias?: string  } 
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createGift'
  | 'updateGift'
  | 'updateManyGifts'
  | 'upsertGift'
  | 'deleteGift'
  | 'deleteManyGifts'
  | 'createMember'
  | 'updateMember'
  | 'updateManyMembers'
  | 'upsertMember'
  | 'deleteMember'
  | 'deleteManyMembers'
  | 'createList'
  | 'updateList'
  | 'updateManyLists'
  | 'upsertList'
  | 'deleteList'
  | 'deleteManyLists'
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'


type MutationCreateGiftArgs =
  | 'data'
type MutationUpdateGiftArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGiftsArgs =
  | 'data'
  | 'where'
type MutationUpsertGiftArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGiftArgs =
  | 'where'
type MutationDeleteManyGiftsArgs =
  | 'where'
type MutationCreateMemberArgs =
  | 'data'
type MutationUpdateMemberArgs =
  | 'data'
  | 'where'
type MutationUpdateManyMembersArgs =
  | 'data'
  | 'where'
type MutationUpsertMemberArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteMemberArgs =
  | 'where'
type MutationDeleteManyMembersArgs =
  | 'where'
type MutationCreateListArgs =
  | 'data'
type MutationUpdateListArgs =
  | 'data'
  | 'where'
type MutationUpdateManyListsArgs =
  | 'data'
  | 'where'
type MutationUpsertListArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteListArgs =
  | 'where'
type MutationDeleteManyListsArgs =
  | 'where'
type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createGift: {
    type: 'Gift'
    args: Record<MutationCreateGiftArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GiftCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Gift> | prisma.Gift
  }
  updateGift: {
    type: 'Gift'
    args: Record<MutationUpdateGiftArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GiftUpdateInput, where: GiftWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Gift | null> | prisma.Gift | null
  }
  updateManyGifts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGiftsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GiftUpdateManyMutationInput, where?: GiftWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGift: {
    type: 'Gift'
    args: Record<MutationUpsertGiftArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GiftWhereUniqueInput, create: GiftCreateInput, update: GiftUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Gift> | prisma.Gift
  }
  deleteGift: {
    type: 'Gift'
    args: Record<MutationDeleteGiftArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GiftWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Gift | null> | prisma.Gift | null
  }
  deleteManyGifts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGiftsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GiftWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createMember: {
    type: 'Member'
    args: Record<MutationCreateMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MemberCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Member> | prisma.Member
  }
  updateMember: {
    type: 'Member'
    args: Record<MutationUpdateMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MemberUpdateInput, where: MemberWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Member | null> | prisma.Member | null
  }
  updateManyMembers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyMembersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: MemberUpdateManyMutationInput, where?: MemberWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertMember: {
    type: 'Member'
    args: Record<MutationUpsertMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MemberWhereUniqueInput, create: MemberCreateInput, update: MemberUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Member> | prisma.Member
  }
  deleteMember: {
    type: 'Member'
    args: Record<MutationDeleteMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: MemberWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Member | null> | prisma.Member | null
  }
  deleteManyMembers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyMembersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: MemberWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createList: {
    type: 'List'
    args: Record<MutationCreateListArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ListCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.List> | prisma.List
  }
  updateList: {
    type: 'List'
    args: Record<MutationUpdateListArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ListUpdateInput, where: ListWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.List | null> | prisma.List | null
  }
  updateManyLists: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyListsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ListUpdateManyMutationInput, where?: ListWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertList: {
    type: 'List'
    args: Record<MutationUpsertListArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ListWhereUniqueInput, create: ListCreateInput, update: ListUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.List> | prisma.List
  }
  deleteList: {
    type: 'List'
    args: Record<MutationDeleteListArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ListWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.List | null> | prisma.List | null
  }
  deleteManyLists: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyListsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ListWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'gift', args?: SubscriptionGiftArgs[] | false, alias?: string  } 
  | { name: 'member', args?: SubscriptionMemberArgs[] | false, alias?: string  } 
  | { name: 'list', args?: SubscriptionListArgs[] | false, alias?: string  } 
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'gift'
  | 'member'
  | 'list'
  | 'user'


type SubscriptionGiftArgs =
  | 'where'
type SubscriptionMemberArgs =
  | 'where'
type SubscriptionListArgs =
  | 'where'
type SubscriptionUserArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  gift: {
    type: 'GiftSubscriptionPayload'
    args: Record<SubscriptionGiftArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GiftSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GiftSubscriptionPayload | null> | prisma.GiftSubscriptionPayload | null
  }
  member: {
    type: 'MemberSubscriptionPayload'
    args: Record<SubscriptionMemberArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: MemberSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MemberSubscriptionPayload | null> | prisma.MemberSubscriptionPayload | null
  }
  list: {
    type: 'ListSubscriptionPayload'
    args: Record<SubscriptionListArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ListSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ListSubscriptionPayload | null> | prisma.ListSubscriptionPayload | null
  }
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
}
  

// Types for GiftSubscriptionPayload

type GiftSubscriptionPayloadObject =
  | GiftSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GiftSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GiftSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GiftSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Gift'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GiftSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Gift | null> | prisma.Gift | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GiftPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GiftSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GiftPreviousValues | null> | prisma.GiftPreviousValues | null
  }
}
  

// Types for GiftPreviousValues

type GiftPreviousValuesObject =
  | GiftPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'link', args?: [] | false, alias?: string  } 

type GiftPreviousValuesFields =
  | 'id'
  | 'name'
  | 'link'



  

export interface GiftPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  link: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for MemberSubscriptionPayload

type MemberSubscriptionPayloadObject =
  | MemberSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type MemberSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface MemberSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"MemberSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Member'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MemberSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Member | null> | prisma.Member | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'MemberPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MemberSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MemberPreviousValues | null> | prisma.MemberPreviousValues | null
  }
}
  

// Types for MemberPreviousValues

type MemberPreviousValuesObject =
  | MemberPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 

type MemberPreviousValuesFields =
  | 'id'
  | 'status'



  

export interface MemberPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'MemberShip'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"MemberPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MemberShip | null> | prisma.MemberShip | null
  }
}
  

// Types for ListSubscriptionPayload

type ListSubscriptionPayloadObject =
  | ListSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ListSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ListSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ListSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'List'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ListSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.List | null> | prisma.List | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ListPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ListSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ListPreviousValues | null> | prisma.ListPreviousValues | null
  }
}
  

// Types for ListPreviousValues

type ListPreviousValuesObject =
  | ListPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'familyName', args?: [] | false, alias?: string  } 
  | { name: 'babyGenre', args?: [] | false, alias?: string  } 
  | { name: 'babyName', args?: [] | false, alias?: string  } 
  | { name: 'birthDate', args?: [] | false, alias?: string  } 
  | { name: 'isActivated', args?: [] | false, alias?: string  } 
  | { name: 'isOpen', args?: [] | false, alias?: string  } 

type ListPreviousValuesFields =
  | 'id'
  | 'name'
  | 'description'
  | 'familyName'
  | 'babyGenre'
  | 'babyName'
  | 'birthDate'
  | 'isActivated'
  | 'isOpen'



  

export interface ListPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  familyName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  babyGenre: {
    type: 'Genre'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ListPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Genre | null> | prisma.Genre | null
  }
  babyName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  birthDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  isActivated: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isOpen: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 
  | { name: 'genre', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'firstName'
  | 'lastName'
  | 'email'
  | 'password'
  | 'createdAt'
  | 'updatedAt'
  | 'role'
  | 'genre'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  role: {
    type: 'Role'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role> | prisma.Role
  }
  genre: {
    type: 'Genre'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Genre> | prisma.Genre
  }
}
  


export interface GiftWhereUniqueInput {
  id?: string | null
}
export type GiftWhereUniqueInputInputObject =
  | Extract<keyof GiftWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface MemberWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  user?: UserWhereInput | null
  status?: prisma.MemberShip | null
  status_not?: prisma.MemberShip | null
  status_in?: prisma.MemberShip[]
  status_not_in?: prisma.MemberShip[]
  AND?: MemberWhereInput[]
  OR?: MemberWhereInput[]
  NOT?: MemberWhereInput[]
}
export type MemberWhereInputInputObject =
  | Extract<keyof MemberWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  firstName?: string | null
  firstName_not?: string | null
  firstName_in?: string[]
  firstName_not_in?: string[]
  firstName_lt?: string | null
  firstName_lte?: string | null
  firstName_gt?: string | null
  firstName_gte?: string | null
  firstName_contains?: string | null
  firstName_not_contains?: string | null
  firstName_starts_with?: string | null
  firstName_not_starts_with?: string | null
  firstName_ends_with?: string | null
  firstName_not_ends_with?: string | null
  lastName?: string | null
  lastName_not?: string | null
  lastName_in?: string[]
  lastName_not_in?: string[]
  lastName_lt?: string | null
  lastName_lte?: string | null
  lastName_gt?: string | null
  lastName_gte?: string | null
  lastName_contains?: string | null
  lastName_not_contains?: string | null
  lastName_starts_with?: string | null
  lastName_not_starts_with?: string | null
  lastName_ends_with?: string | null
  lastName_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  role?: prisma.Role | null
  role_not?: prisma.Role | null
  role_in?: prisma.Role[]
  role_not_in?: prisma.Role[]
  genre?: prisma.Genre | null
  genre_not?: prisma.Genre | null
  genre_in?: prisma.Genre[]
  genre_not_in?: prisma.Genre[]
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'firstName_not', alias?: string  } 
  | { name: 'firstName_in', alias?: string  } 
  | { name: 'firstName_not_in', alias?: string  } 
  | { name: 'firstName_lt', alias?: string  } 
  | { name: 'firstName_lte', alias?: string  } 
  | { name: 'firstName_gt', alias?: string  } 
  | { name: 'firstName_gte', alias?: string  } 
  | { name: 'firstName_contains', alias?: string  } 
  | { name: 'firstName_not_contains', alias?: string  } 
  | { name: 'firstName_starts_with', alias?: string  } 
  | { name: 'firstName_not_starts_with', alias?: string  } 
  | { name: 'firstName_ends_with', alias?: string  } 
  | { name: 'firstName_not_ends_with', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'lastName_not', alias?: string  } 
  | { name: 'lastName_in', alias?: string  } 
  | { name: 'lastName_not_in', alias?: string  } 
  | { name: 'lastName_lt', alias?: string  } 
  | { name: 'lastName_lte', alias?: string  } 
  | { name: 'lastName_gt', alias?: string  } 
  | { name: 'lastName_gte', alias?: string  } 
  | { name: 'lastName_contains', alias?: string  } 
  | { name: 'lastName_not_contains', alias?: string  } 
  | { name: 'lastName_starts_with', alias?: string  } 
  | { name: 'lastName_not_starts_with', alias?: string  } 
  | { name: 'lastName_ends_with', alias?: string  } 
  | { name: 'lastName_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'role_not', alias?: string  } 
  | { name: 'role_in', alias?: string  } 
  | { name: 'role_not_in', alias?: string  } 
  | { name: 'genre', alias?: string  } 
  | { name: 'genre_not', alias?: string  } 
  | { name: 'genre_in', alias?: string  } 
  | { name: 'genre_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GiftWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  link?: string | null
  link_not?: string | null
  link_in?: string[]
  link_not_in?: string[]
  link_lt?: string | null
  link_lte?: string | null
  link_gt?: string | null
  link_gte?: string | null
  link_contains?: string | null
  link_not_contains?: string | null
  link_starts_with?: string | null
  link_not_starts_with?: string | null
  link_ends_with?: string | null
  link_not_ends_with?: string | null
  list?: ListWhereInput | null
  owner?: UserWhereInput | null
  AND?: GiftWhereInput[]
  OR?: GiftWhereInput[]
  NOT?: GiftWhereInput[]
}
export type GiftWhereInputInputObject =
  | Extract<keyof GiftWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'link', alias?: string  } 
  | { name: 'link_not', alias?: string  } 
  | { name: 'link_in', alias?: string  } 
  | { name: 'link_not_in', alias?: string  } 
  | { name: 'link_lt', alias?: string  } 
  | { name: 'link_lte', alias?: string  } 
  | { name: 'link_gt', alias?: string  } 
  | { name: 'link_gte', alias?: string  } 
  | { name: 'link_contains', alias?: string  } 
  | { name: 'link_not_contains', alias?: string  } 
  | { name: 'link_starts_with', alias?: string  } 
  | { name: 'link_not_starts_with', alias?: string  } 
  | { name: 'link_ends_with', alias?: string  } 
  | { name: 'link_not_ends_with', alias?: string  } 
  | { name: 'list', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ListWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  familyName?: string | null
  familyName_not?: string | null
  familyName_in?: string[]
  familyName_not_in?: string[]
  familyName_lt?: string | null
  familyName_lte?: string | null
  familyName_gt?: string | null
  familyName_gte?: string | null
  familyName_contains?: string | null
  familyName_not_contains?: string | null
  familyName_starts_with?: string | null
  familyName_not_starts_with?: string | null
  familyName_ends_with?: string | null
  familyName_not_ends_with?: string | null
  babyGenre?: prisma.Genre | null
  babyGenre_not?: prisma.Genre | null
  babyGenre_in?: prisma.Genre[]
  babyGenre_not_in?: prisma.Genre[]
  babyName?: string | null
  babyName_not?: string | null
  babyName_in?: string[]
  babyName_not_in?: string[]
  babyName_lt?: string | null
  babyName_lte?: string | null
  babyName_gt?: string | null
  babyName_gte?: string | null
  babyName_contains?: string | null
  babyName_not_contains?: string | null
  babyName_starts_with?: string | null
  babyName_not_starts_with?: string | null
  babyName_ends_with?: string | null
  babyName_not_ends_with?: string | null
  birthDate?: string | null
  birthDate_not?: string | null
  birthDate_in?: string[]
  birthDate_not_in?: string[]
  birthDate_lt?: string | null
  birthDate_lte?: string | null
  birthDate_gt?: string | null
  birthDate_gte?: string | null
  author?: UserWhereInput | null
  members_every?: MemberWhereInput | null
  members_some?: MemberWhereInput | null
  members_none?: MemberWhereInput | null
  isActivated?: boolean | null
  isActivated_not?: boolean | null
  isOpen?: boolean | null
  isOpen_not?: boolean | null
  AND?: ListWhereInput[]
  OR?: ListWhereInput[]
  NOT?: ListWhereInput[]
}
export type ListWhereInputInputObject =
  | Extract<keyof ListWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'familyName', alias?: string  } 
  | { name: 'familyName_not', alias?: string  } 
  | { name: 'familyName_in', alias?: string  } 
  | { name: 'familyName_not_in', alias?: string  } 
  | { name: 'familyName_lt', alias?: string  } 
  | { name: 'familyName_lte', alias?: string  } 
  | { name: 'familyName_gt', alias?: string  } 
  | { name: 'familyName_gte', alias?: string  } 
  | { name: 'familyName_contains', alias?: string  } 
  | { name: 'familyName_not_contains', alias?: string  } 
  | { name: 'familyName_starts_with', alias?: string  } 
  | { name: 'familyName_not_starts_with', alias?: string  } 
  | { name: 'familyName_ends_with', alias?: string  } 
  | { name: 'familyName_not_ends_with', alias?: string  } 
  | { name: 'babyGenre', alias?: string  } 
  | { name: 'babyGenre_not', alias?: string  } 
  | { name: 'babyGenre_in', alias?: string  } 
  | { name: 'babyGenre_not_in', alias?: string  } 
  | { name: 'babyName', alias?: string  } 
  | { name: 'babyName_not', alias?: string  } 
  | { name: 'babyName_in', alias?: string  } 
  | { name: 'babyName_not_in', alias?: string  } 
  | { name: 'babyName_lt', alias?: string  } 
  | { name: 'babyName_lte', alias?: string  } 
  | { name: 'babyName_gt', alias?: string  } 
  | { name: 'babyName_gte', alias?: string  } 
  | { name: 'babyName_contains', alias?: string  } 
  | { name: 'babyName_not_contains', alias?: string  } 
  | { name: 'babyName_starts_with', alias?: string  } 
  | { name: 'babyName_not_starts_with', alias?: string  } 
  | { name: 'babyName_ends_with', alias?: string  } 
  | { name: 'babyName_not_ends_with', alias?: string  } 
  | { name: 'birthDate', alias?: string  } 
  | { name: 'birthDate_not', alias?: string  } 
  | { name: 'birthDate_in', alias?: string  } 
  | { name: 'birthDate_not_in', alias?: string  } 
  | { name: 'birthDate_lt', alias?: string  } 
  | { name: 'birthDate_lte', alias?: string  } 
  | { name: 'birthDate_gt', alias?: string  } 
  | { name: 'birthDate_gte', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'members_every', alias?: string  } 
  | { name: 'members_some', alias?: string  } 
  | { name: 'members_none', alias?: string  } 
  | { name: 'isActivated', alias?: string  } 
  | { name: 'isActivated_not', alias?: string  } 
  | { name: 'isOpen', alias?: string  } 
  | { name: 'isOpen_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MemberWhereUniqueInput {
  id?: string | null
}
export type MemberWhereUniqueInputInputObject =
  | Extract<keyof MemberWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ListWhereUniqueInput {
  id?: string | null
}
export type ListWhereUniqueInputInputObject =
  | Extract<keyof ListWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface GiftCreateInput {
  id?: string | null
  name?: string
  link?: string
  list?: ListCreateOneInput
  owner?: UserCreateOneInput | null
}
export type GiftCreateInputInputObject =
  | Extract<keyof GiftCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'link', alias?: string  } 
  | { name: 'list', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  
export interface ListCreateOneInput {
  create?: ListCreateInput | null
  connect?: ListWhereUniqueInput | null
}
export type ListCreateOneInputInputObject =
  | Extract<keyof ListCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ListCreateInput {
  id?: string | null
  name?: string
  description?: string | null
  familyName?: string | null
  babyGenre?: prisma.Genre | null
  babyName?: string | null
  birthDate?: string | null
  author?: UserCreateOneInput
  members?: MemberCreateManyInput | null
  isActivated?: boolean | null
  isOpen?: boolean | null
}
export type ListCreateInputInputObject =
  | Extract<keyof ListCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'familyName', alias?: string  } 
  | { name: 'babyGenre', alias?: string  } 
  | { name: 'babyName', alias?: string  } 
  | { name: 'birthDate', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'members', alias?: string  } 
  | { name: 'isActivated', alias?: string  } 
  | { name: 'isOpen', alias?: string  } 
  
export interface UserCreateOneInput {
  create?: UserCreateInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneInputInputObject =
  | Extract<keyof UserCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  firstName?: string
  lastName?: string
  email?: string
  password?: string
  role?: prisma.Role | null
  genre?: prisma.Genre
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'genre', alias?: string  } 
  
export interface MemberCreateManyInput {
  create?: MemberCreateInput[]
  connect?: MemberWhereUniqueInput[]
}
export type MemberCreateManyInputInputObject =
  | Extract<keyof MemberCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface MemberCreateInput {
  id?: string | null
  user?: UserCreateOneInput
  status?: prisma.MemberShip | null
}
export type MemberCreateInputInputObject =
  | Extract<keyof MemberCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface GiftUpdateInput {
  name?: string | null
  link?: string | null
  list?: ListUpdateOneRequiredInput | null
  owner?: UserUpdateOneInput | null
}
export type GiftUpdateInputInputObject =
  | Extract<keyof GiftUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'link', alias?: string  } 
  | { name: 'list', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  
export interface ListUpdateOneRequiredInput {
  create?: ListCreateInput | null
  update?: ListUpdateDataInput | null
  upsert?: ListUpsertNestedInput | null
  connect?: ListWhereUniqueInput | null
}
export type ListUpdateOneRequiredInputInputObject =
  | Extract<keyof ListUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ListUpdateDataInput {
  name?: string | null
  description?: string | null
  familyName?: string | null
  babyGenre?: prisma.Genre | null
  babyName?: string | null
  birthDate?: string | null
  author?: UserUpdateOneRequiredInput | null
  members?: MemberUpdateManyInput | null
  isActivated?: boolean | null
  isOpen?: boolean | null
}
export type ListUpdateDataInputInputObject =
  | Extract<keyof ListUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'familyName', alias?: string  } 
  | { name: 'babyGenre', alias?: string  } 
  | { name: 'babyName', alias?: string  } 
  | { name: 'birthDate', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'members', alias?: string  } 
  | { name: 'isActivated', alias?: string  } 
  | { name: 'isOpen', alias?: string  } 
  
export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput | null
  update?: UserUpdateDataInput | null
  upsert?: UserUpsertNestedInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredInputInputObject =
  | Extract<keyof UserUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateDataInput {
  firstName?: string | null
  lastName?: string | null
  email?: string | null
  password?: string | null
  role?: prisma.Role | null
  genre?: prisma.Genre | null
}
export type UserUpdateDataInputInputObject =
  | Extract<keyof UserUpdateDataInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'genre', alias?: string  } 
  
export interface UserUpsertNestedInput {
  update?: UserUpdateDataInput
  create?: UserCreateInput
}
export type UserUpsertNestedInputInputObject =
  | Extract<keyof UserUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MemberUpdateManyInput {
  create?: MemberCreateInput[]
  update?: MemberUpdateWithWhereUniqueNestedInput[]
  upsert?: MemberUpsertWithWhereUniqueNestedInput[]
  delete?: MemberWhereUniqueInput[]
  connect?: MemberWhereUniqueInput[]
  set?: MemberWhereUniqueInput[]
  disconnect?: MemberWhereUniqueInput[]
  deleteMany?: MemberScalarWhereInput[]
  updateMany?: MemberUpdateManyWithWhereNestedInput[]
}
export type MemberUpdateManyInputInputObject =
  | Extract<keyof MemberUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface MemberUpdateWithWhereUniqueNestedInput {
  where?: MemberWhereUniqueInput
  data?: MemberUpdateDataInput
}
export type MemberUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof MemberUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface MemberUpdateDataInput {
  user?: UserUpdateOneRequiredInput | null
  status?: prisma.MemberShip | null
}
export type MemberUpdateDataInputInputObject =
  | Extract<keyof MemberUpdateDataInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface MemberUpsertWithWhereUniqueNestedInput {
  where?: MemberWhereUniqueInput
  update?: MemberUpdateDataInput
  create?: MemberCreateInput
}
export type MemberUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof MemberUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface MemberScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  status?: prisma.MemberShip | null
  status_not?: prisma.MemberShip | null
  status_in?: prisma.MemberShip[]
  status_not_in?: prisma.MemberShip[]
  AND?: MemberScalarWhereInput[]
  OR?: MemberScalarWhereInput[]
  NOT?: MemberScalarWhereInput[]
}
export type MemberScalarWhereInputInputObject =
  | Extract<keyof MemberScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MemberUpdateManyWithWhereNestedInput {
  where?: MemberScalarWhereInput
  data?: MemberUpdateManyDataInput
}
export type MemberUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof MemberUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface MemberUpdateManyDataInput {
  status?: prisma.MemberShip | null
}
export type MemberUpdateManyDataInputInputObject =
  | Extract<keyof MemberUpdateManyDataInput, string>
  | { name: 'status', alias?: string  } 
  
export interface ListUpsertNestedInput {
  update?: ListUpdateDataInput
  create?: ListCreateInput
}
export type ListUpsertNestedInputInputObject =
  | Extract<keyof ListUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpdateOneInput {
  create?: UserCreateInput | null
  update?: UserUpdateDataInput | null
  upsert?: UserUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneInputInputObject =
  | Extract<keyof UserUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GiftUpdateManyMutationInput {
  name?: string | null
  link?: string | null
}
export type GiftUpdateManyMutationInputInputObject =
  | Extract<keyof GiftUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'link', alias?: string  } 
  
export interface MemberUpdateInput {
  user?: UserUpdateOneRequiredInput | null
  status?: prisma.MemberShip | null
}
export type MemberUpdateInputInputObject =
  | Extract<keyof MemberUpdateInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'status', alias?: string  } 
  
export interface MemberUpdateManyMutationInput {
  status?: prisma.MemberShip | null
}
export type MemberUpdateManyMutationInputInputObject =
  | Extract<keyof MemberUpdateManyMutationInput, string>
  | { name: 'status', alias?: string  } 
  
export interface ListUpdateInput {
  name?: string | null
  description?: string | null
  familyName?: string | null
  babyGenre?: prisma.Genre | null
  babyName?: string | null
  birthDate?: string | null
  author?: UserUpdateOneRequiredInput | null
  members?: MemberUpdateManyInput | null
  isActivated?: boolean | null
  isOpen?: boolean | null
}
export type ListUpdateInputInputObject =
  | Extract<keyof ListUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'familyName', alias?: string  } 
  | { name: 'babyGenre', alias?: string  } 
  | { name: 'babyName', alias?: string  } 
  | { name: 'birthDate', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'members', alias?: string  } 
  | { name: 'isActivated', alias?: string  } 
  | { name: 'isOpen', alias?: string  } 
  
export interface ListUpdateManyMutationInput {
  name?: string | null
  description?: string | null
  familyName?: string | null
  babyGenre?: prisma.Genre | null
  babyName?: string | null
  birthDate?: string | null
  isActivated?: boolean | null
  isOpen?: boolean | null
}
export type ListUpdateManyMutationInputInputObject =
  | Extract<keyof ListUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'familyName', alias?: string  } 
  | { name: 'babyGenre', alias?: string  } 
  | { name: 'babyName', alias?: string  } 
  | { name: 'birthDate', alias?: string  } 
  | { name: 'isActivated', alias?: string  } 
  | { name: 'isOpen', alias?: string  } 
  
export interface UserUpdateInput {
  firstName?: string | null
  lastName?: string | null
  email?: string | null
  password?: string | null
  role?: prisma.Role | null
  genre?: prisma.Genre | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'genre', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  firstName?: string | null
  lastName?: string | null
  email?: string | null
  password?: string | null
  role?: prisma.Role | null
  genre?: prisma.Genre | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'genre', alias?: string  } 
  
export interface GiftSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GiftWhereInput | null
  AND?: GiftSubscriptionWhereInput[]
  OR?: GiftSubscriptionWhereInput[]
  NOT?: GiftSubscriptionWhereInput[]
}
export type GiftSubscriptionWhereInputInputObject =
  | Extract<keyof GiftSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface MemberSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: MemberWhereInput | null
  AND?: MemberSubscriptionWhereInput[]
  OR?: MemberSubscriptionWhereInput[]
  NOT?: MemberSubscriptionWhereInput[]
}
export type MemberSubscriptionWhereInputInputObject =
  | Extract<keyof MemberSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ListSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ListWhereInput | null
  AND?: ListSubscriptionWhereInput[]
  OR?: ListSubscriptionWhereInput[]
  NOT?: ListSubscriptionWhereInput[]
}
export type ListSubscriptionWhereInputInputObject =
  | Extract<keyof ListSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type GenreValues =
  | 'MALE'
  | 'FEMALE'
  
export type RoleValues =
  | 'USER'
  | 'ADMIN'
  
export type MemberShipValues =
  | 'CONTRIBUTOR'
  | 'ADMIN'
  
export type MemberOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type GiftOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'link_ASC'
  | 'link_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ListOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'familyName_ASC'
  | 'familyName_DESC'
  | 'babyGenre_ASC'
  | 'babyGenre_DESC'
  | 'babyName_ASC'
  | 'babyName_DESC'
  | 'birthDate_ASC'
  | 'birthDate_DESC'
  | 'isActivated_ASC'
  | 'isActivated_DESC'
  | 'isOpen_ASC'
  | 'isOpen_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'firstName_ASC'
  | 'firstName_DESC'
  | 'lastName_ASC'
  | 'lastName_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'role_ASC'
  | 'role_DESC'
  | 'genre_ASC'
  | 'genre_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  